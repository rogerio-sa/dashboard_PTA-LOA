cor_divida <- "#dd3127"
cor_RGPS <- azul_STN
cor_padrao_despesas <- "#888888"
qde_rec_destacadas <- 2
qde_cores_extras <- length(unique(matriz$nr)) - qde_rec_destacadas
paleta_STN <- brewer.pal(qde_cores_extras, "Set2")
#paleta_STN <- c("#F8AC08","#CEC806","#96C11E","#028063","#149339","#4E857E","#6E287C")
paleta_STN_rgb <- col2rgb(paleta_STN)
# essa função gera uma matriz com os componentes RGB.
# precisamos fornecer as cores no formato "rgb(r,g,b)"
# além disso, para os ramos, é interessante que as cores sejam translúcidas,
# então vamos acrescentar um componente de transparência
paleta_STN_transluc <- NULL
for (i in 1:dim(paleta_STN_rgb)[2] ) {
paleta_STN_transluc <- c(paleta_STN_transluc, paste("rgba(", paleta_STN_rgb[1,i],", ",  paleta_STN_rgb[2,i],", ",  paleta_STN_rgb[3,i],", 0.7)", sep = ""))
}
# rotininha para povoar as cores dos ramos e dos nos, conforme as receitas
receitas <- unique(matriz$nr)
cores_ramos <- NULL
cores_nos <- NULL
k = 1
for (i in 1:length(receitas)) {
if (receitas[i] == "Contribuições e outras receitas do RGPS") {
cores_ramos <- c(cores_ramos, cor_RGPS_transluc)
cores_nos <- c(cores_nos, cor_RGPS)
}
else if (receitas[i] == "Emissões de títulos") {
cores_ramos <- c(cores_ramos, cor_divida_transluc)
cores_nos <- c(cores_nos, cor_divida)
}
else {
cores_ramos <- c(cores_ramos, paleta_STN_transluc[k])
cores_nos <- c(cores_nos, paleta_STN[k])
k <- k + 1 # o certo seria fazer algo modular, caso sejam mais receitas que cores
}
}
receitas
receitas <- unique(matriz$nr)
cores_ramos <- NULL
cores_nos <- NULL
k = 1
for (i in 1:length(receitas)) {
if (receitas[i] == "Contribuições e outras receitas do RGPS" ) {
cores_ramos <- c(cores_ramos, cor_RGPS_transluc)
cores_nos <- c(cores_nos, cor_RGPS)
}
else if (receitas[i] == "Emissões de títulos") {
cores_ramos <- c(cores_ramos, cor_divida_transluc)
cores_nos <- c(cores_nos, cor_divida)
}
else {
cores_ramos <- c(cores_ramos, paleta_STN_transluc[k])
cores_nos <- c(cores_nos, paleta_STN[k])
k <- k + 1 # o certo seria fazer algo modular, caso sejam mais receitas que cores
}
}
# DEFINIÇÕES DAS CORES
library(RColorBrewer)
azul_STN <- "#004a93"
cor_divida_transluc <- "rgba(221, 49, 39,0.7)"
cor_RGPS_transluc <- "rgba(0,75,147,0.7)"
cor_divida <- "#dd3127"
cor_RGPS <- azul_STN
cor_padrao_despesas <- "#888888"
qde_rec_destacadas <- 2
qde_cores_extras <- length(unique(matriz$nr)) - qde_rec_destacadas
paleta_STN <- brewer.pal(qde_cores_extras, "Set2")
#paleta_STN <- c("#F8AC08","#CEC806","#96C11E","#028063","#149339","#4E857E","#6E287C")
paleta_STN_rgb <- col2rgb(paleta_STN)
# essa função gera uma matriz com os componentes RGB.
# precisamos fornecer as cores no formato "rgb(r,g,b)"
# além disso, para os ramos, é interessante que as cores sejam translúcidas,
# então vamos acrescentar um componente de transparência
paleta_STN_transluc <- NULL
for (i in 1:dim(paleta_STN_rgb)[2] ) {
paleta_STN_transluc <- c(paleta_STN_transluc, paste("rgba(", paleta_STN_rgb[1,i],", ",  paleta_STN_rgb[2,i],", ",  paleta_STN_rgb[3,i],", 0.7)", sep = ""))
}
# rotininha para povoar as cores dos ramos e dos nos, conforme as receitas
receitas <- unique(matriz$nr)
cores_ramos <- NULL
cores_nos <- NULL
k = 1
for (i in 1:length(receitas)) {
if (receitas[i] == "Contribuições e outras receitas do RGPS" ) {
cores_ramos <- c(cores_ramos, cor_RGPS_transluc)
cores_nos <- c(cores_nos, cor_RGPS)
}
else if (receitas[i] == "Emissões de títulos") {
cores_ramos <- c(cores_ramos, cor_divida_transluc)
cores_nos <- c(cores_nos, cor_divida)
}
else {
cores_ramos <- c(cores_ramos, paleta_STN_transluc[k])
cores_nos <- c(cores_nos, paleta_STN[k])
k <- k + 1 # o certo seria fazer algo modular, caso sejam mais receitas que cores
}
}
receitas <- unique(matriz$nr)
receitas
matriz$nr
rec <- read_excel("dados/Sankey Receitas por Fonte.xlsx", skip = 10)
des <- read_excel("dados/Sankey Despesas por Fonte.xlsx", skip = 10)
names(rec) <- c("nr", "fte", "fte_nome", "rec")
names(des) <- c("fte", "fte_nome", "nd", "des")
rec <- rec %>%
group_by(nr) %>%
mutate(rec = rec,  #/1000000
subtot_rec = sum(rec),
per_rec_fte = rec/sum(rec)) # calcula os % de distrib. de cada rec nas ftes
des <- des %>%
group_by(fte) %>%
mutate(des = des, #/1000000
per_fte_des = des/sum(des)) # calcula os % de distrib. de fte nas desps
matriz <- rec %>%
full_join(des)
# calcula o % de dist. de cada rec nas desps
# calcula então o tamanho de cada link, partir do subtotal de cada receita. ignorando se for menor que um bilhao
### a fazer: remover as linhas com um anti_join, para não contaminar a informação do hoover (outgoing, ingoing count)
matriz <- matriz %>%
mutate(p = per_rec_fte * per_fte_des,
# ramo = ifelse((round(subtot_rec * p,0)<1000000000),0,round(subtot_rec * p,0))) %>%
ramo = round(subtot_rec * p,0)) %>%
group_by(nr,nd) %>%
summarise(p = sum(p),
ramo = sum(ramo)) %>%
select(nr,nd,p,ramo)
matriz
matriz
View(matriz)
receitas
receitas <- unique(matriz$nr)[1:9,]
receitas <- unique(matriz$nr)[1:9,]
receitas <- receitas[1:9,]
receitas <- receitas[1:9]
dados <- read_excel("atlas2013_dadosbrutos_pt.xlsx", sheet = 2)
library(shiny)
library(shiny)
library(readxl)
library(ggplot2)
library(ggplot2)
library(dplyr)
library(ggplot2)
library(dplyr)
library(networkD3)
library(plotly)
library(viridis)
library(stringr)
library(dplyr)
library(networkD3)
library(plotly)
library(viridis)
library(stringr)
library(readr)
library(readr)
library(Cairo)
library(ggrepel)
library(Cairo)
library(ggrepel)
library(colorspace)
library(networkD3)
library(plotly)
library(viridis)
library(stringr)
library(readr)
library(Cairo)
library(ggrepel)
library(colorspace)
library(cluster)
library(stringr)
library(readxl)
library(magrittr)
library(dplyr) # utilizado na manipulação de dados
#novas libraries
library(purrr)
dados <- read_excel("atlas2013_dadosbrutos_pt.xlsx", sheet = 2)
dados
ano
ano <- unique(dados$ANO)
ano
dados_mt <- dados %>% filter(ano == input$ano)
# shiny inputs defined here
ano <- unique(dados$ANO)
selectInput("ano",label = "Selecione o Exercício: ",choices = ano, selected = ultimo_ano[[3]])
# shiny inputs defined here
ano <- unique(dados$ANO)
selectInput("ano",label = "Selecione o Exercício: ",choices = ano, selected = ano[[3]])
dados_mt <- dados %>% filter(ano == input$ano)
dados_mt <- dados %>% filter(ANO == input$ano)
dados
dados_mt <- dados %>% filter(ANO == input$ano, ESPVIDA)
dados_mt <- dados %>% filter(ANO == input$ano, ESPVIDA)
# shiny inputs defined here
ano <- unique(dados$ANO)
selectInput("ano",label = "Selecione o Exercício: ",choices = ano, selected = ano[[3]])
library(flexdashboard)
library(networkD3)
library(shiny)
library(readxl)
library(ggplot2)
library(dplyr)
library(networkD3)
library(plotly)
library(viridis)
library(stringr)
library(readr)
library(Cairo)
library(ggrepel)
library(colorspace)
library(cluster)
library(tidyr)
library(stringr)
library(readxl)
library(magrittr)
library(dplyr) # utilizado na manipulação de dados
#novas libraries
library(purrr)
options(shiny.usecairo=T)
dados <- read_excel("atlas2013_dadosbrutos_pt.xlsx", sheet = 2)
# shiny inputs defined here
ano <- unique(dados$ANO)
selectInput("ano",label = "Selecione o Exercício: ",choices = ano, selected = ano[[3]])
renderPlot({
dados_mt <- dados %>% filter(ANO == input$ano, ESPVIDA)
})
renderPlot({
dados_mt <- dados %>% filter(ANO == input$ano, ESPVIDA)
plot(dados_mt)
})
renderPlot({
dados_mt <- dados %>% filter(ANO == input$ano, ESPVIDA)
plot(dados_mt)
})
dados
dados_mt
dados_mt <- dados %>% filter(ANO == input$ano, ESPVIDA,FECTOT)
dados
renderPlot({
dados_mt <- dados[,1:5] %>% filter(ANO == input$ano)
plot(dados_mt)
})
?gauge
library(flexdashboard)
library(networkD3)
library(shiny)
library(readxl)
library(ggplot2)
library(dplyr)
library(networkD3)
library(plotly)
library(viridis)
library(stringr)
library(readr)
library(Cairo)
library(ggrepel)
library(colorspace)
library(cluster)
library(tidyr)
library(stringr)
library(readxl)
library(magrittr)
library(dplyr) # utilizado na manipulação de dados
#novas libraries
library(purrr)
# these computing functions are only toy examples
computeArticles = function(...) return(45)
computeComments = function(...) return(126)
computeSpam = function(...) return(15)
options(shiny.usecairo=T)
dados <- read_excel("atlas2013_dadosbrutos_pt.xlsx", sheet = 2)
# define credentials
credentials <- read_excel("credenciais.xlsx", sheet = 1)
gauge(91, min = 0, max = 100, symbol = '%', title ="espdd", gaugeSectors(
success = c(80, 100), warning = c(40, 79), danger = c(0, 39)
))
library(grid, lib.loc = "C:/Program Files/R/R-4.0.2/library")
library(flexdashboard)
library(networkD3)
library(shiny)
library(readxl)
library(ggplot2)
library(dplyr)
library(networkD3)
library(plotly)
library(viridis)
library(stringr)
library(readr)
library(Cairo)
library(ggrepel)
library(colorspace)
library(cluster)
library(tidyr)
library(stringr)
library(readxl)
library(magrittr)
library(dplyr) # utilizado na manipulação de dados
#novas libraries
library(purrr)
library(grid)
# these computing functions are only toy examples
computeArticles = function(...) return(45)
computeComments = function(...) return(126)
computeSpam = function(...) return(15)
options(shiny.usecairo=T)
dados <- read_excel("atlas2013_dadosbrutos_pt.xlsx", sheet = 2)
# define credentials
credentials <- read_excel("credenciais.xlsx", sheet = 1)
grid.newpage()
draw.gauge(100*runif(1), breaks=c(0,30,70,100), axis=T)
grid.newpage()
draw.gauge(100*runif(1), breaks=c(0,30,70,100), axis=T)
draw.gauge(100*runif(1), breaks=c(0,30,70,100), axis=T)
library(rsconnect)
library(archive)
install.packages('RPostgreSQL')
drv <- dbDriver("PostgreSQL")
tryCatch({
drv <- dbDriver("PostgreSQL")
print("Connecting to Database…")
connec <- dbConnect(drv,
dbname = banco_cnpj,
host = localhost,
port = 5432,
user = dejanezambrim,
password = zambrim123)
print("Database Connected!")
},
error=function(cond) {
print("Unable to connect to Database.")
})
tryCatch({
drv <- dbDriver("PostgreSQL")
print("Connecting to Database…")
connec <- dbConnect(drv,
dbname = banco_cnpj,
host = localhost,
port = 5432,
user = dejanezambrim,
password = zambrim123)
print("Database Connected!")
},
error=function(cond) {
print("Unable to connect to Database.")
})
library(RPostgreSQL)
tryCatch({
drv <- dbDriver("PostgreSQL")
print("Connecting to Database…")
connec <- dbConnect(drv,
dbname = banco_cnpj,
host = localhost,
port = 5432,
user = dejanezambrim,
password = zambrim123)
print("Database Connected!")
},
error=function(cond) {
print("Unable to connect to Database.")
})
tryCatch({
drv <- dbDriver("PostgreSQL")
print("Connecting to Database…")
connec <- dbConnect(drv,
dbname = banco_cnpj,
host = localhost,
port = 5432,
user = dejanezambrim,
password = zambrim123)
print("Database Connected!")
},
error=function(cond) {
print("Unable to connect to Database.")
})
df <- dbGetQuery(connec, "SELECT * FROM tb_cnae
LIMIT 10")
drv <- dbDriver("PostgreSQL")
print("Connecting to Database…")
connec <- dbConnect(drv,
dbname = banco_cnpj,
host = localhost,
port = 5432,
user = dejanezambrim,
password = zambrim123)
connec <- dbConnect(drv,
dbname = banco_cnpj,
host = localhost,
port = 5432,
user = "dejanezambrim",
password = zambrim123)
connec <- dbConnect(drv,
dbname = banco_cnpj,
host = localhost,
port = 5432,
user = "dejanezambrim",
password = "zambrim123")
connec <- dbConnect(drv,
dbname = "banco_cnpj",
host = "localhost",
port = 5432,
user = "dejanezambrim",
password = "zambrim123")
print("Database Connected!")
df <- dbGetQuery(connec, "SELECT * FROM tb_cnae
LIMIT 10")
drv <- dbDriver("PostgreSQL")
print("Connecting to Database…")
connec <- dbConnect(drv,
dbname = "banco_cnpj",
host = "localhost",
port = 5432,
user = "dejanezambrim",
password = "zambrim123")
connec
?dbConnect
drv <- dbDriver("postgres")
drv <- dbDriver("PostgreSQL")
View(drv)
connec <- dbConnect(drv,
dbname = "emprego",
host = "localhost",
port = 5432,
user = "dejanezambrim",
password = "zambrim123")
connec <- dbConnect(drv,
dbname = "emprego",
host = "localhost",
port = 5432,
user = "dejanezambrim",
password = "zambrim123")
print("Database Connected!")
df <- dbGetQuery(connec, "SELECT * FROM tb_cnae
LIMIT 10")
drv <- dbDriver("postgres")
connec <- dbConnect(drv,
dbname = "postgres",
host = "localhost",
port = 5432,
user = "dejanezambrim",
password = "zambrim123")
drv <- dbDriver("PostgreSQL")
connec <- dbConnect(drv,
dbname = "postgres",
host = "localhost",
port = 5432,
user = "dejanezambrim",
password = "zambrim123")
drv <- dbDriver("PostgreSQL")
connec <- dbConnect(drv,
dbname = "postgres",
host = "localhost",
port = 5432,
user = "dejanezambrim",
password = "zambrim123")
connec
drv <- dbDriver("PostgreSQL")
onnec <- dbConnect(drv,
dbname = "postgres",
host = "localhost",
port = 5432,
user = "dejanezambrim",
password = "zambrim123")
connec <- dbConnect(drv,
dbname = "postgres",
host = "localhost",
port = 5432,
user = "dejanezambrim",
password = "zambrim123")
conc <- dbConnect(drv, dbname = "postgres",
host = "localhost",
port = 5432,
user = "postgres",
password = "Isabella28")
conc <- dbConnect(drv, dbname = "postgres",
host = "localhost",
port = 5432,
user = "postgres",
password = "Isabella28")
conc <- dbConnect(drv, dbname = "postgres",
host = "localhost",
port = 5432,
)
conc <- dbConnect(drv, dbname = "postgres",
host = "localhost",
port = 5432
)
conc <- dbConnect(drv, dbname = "postgres")
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
conc <- dbConnect(drv, dbname = "postgres")
detach("package:RPostgreSQL", unload = TRUE)
library(RPostgreSQL)
conc <- dbConnect(drv, dbname = "postgres")
print("Database Connected!")
df <- dbGetQuery(connec, "SELECT * FROM tb_cnae
LIMIT 10")
drv <- dbConnect("PostgreSQL")
drv <- dbDriver("PostgreSQL")
conc <- dbConnect(drv, dbname = "postgres")
tryCatch({
drv <- dbDriver("PostgreSQL")
print("Connecting to Database…")
connec <- dbConnect(drv,
dbname = dsn_database,
host = dsn_hostname,
port = dsn_port,
user = dsn_uid,
password = dsn_pwd)
print("Database Connected!")
},
error=function(cond) {
print("Unable to connect to Database.")
})
setwd("C:/Users/roger_uqxxgvm/Desktop/dashboard_PTA/dashboard_PTA-LOA")
